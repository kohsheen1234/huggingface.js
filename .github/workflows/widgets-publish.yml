name: Widgets - Version and Release

on:
  workflow_dispatch:
    inputs:
      newversion:
        description: "Semantic Version Bump Type (major minor patch)"
        default: patch

defaults:
  run:
    working-directory: packages/widgets

jobs:
  version_and_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_ACCESS_TOKEN }}
      - run: corepack enable
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "pnpm"
          cache-dependency-path: |
            packages/widgets/pnpm-lock.yaml
          # setting a registry enables the NODE_AUTH_TOKEN env variable where we can set an npm token.  REQUIRED
          registry-url: "https://registry.npmjs.org"
      - run: pnpm install
      - run: git config --global user.name machineuser
      - run: git config --global user.email infra+machineuser@huggingface.co
      - run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          BUMPED_VERSION=$(node -p "require('semver').inc('$PACKAGE_VERSION', '${{ github.event.inputs.newversion }}')")
          # Update package.json with the new version
          node -e "const fs = require('fs'); const package = JSON.parse(fs.readFileSync('./package.json')); package.version = '$BUMPED_VERSION'; fs.writeFileSync('./package.json', JSON.stringify(package, null, '\t') + '\n');"
          git commit . -m "ðŸ”– @huggingface/widgets $BUMPED_VERSION"
          git tag "widgets-v$BUMPED_VERSION"
      - run: |
          # Clean up the workspace
          rm -rf ../tasks/node_modules ../tasks/dist

          # Calculate checksum of the cleaned package
          echo "Calculating checksum of local @huggingface/tasks package..."
          LOCAL_CHECKSUM=$(cd ../tasks && tar --mtime='1970-01-01' --mode=755 -cf - . | sha256sum | cut -d' ' -f1)
          echo "Local package checksum: $LOCAL_CHECKSUM"

          # Fetch the latest published version of @huggingface/tasks from npm
          echo "Fetching latest published version of @huggingface/tasks..."
          LATEST_PUBLISHED_VERSION=$(npm view @huggingface/tasks version)
          if [ -z "$LATEST_PUBLISHED_VERSION" ]; then
            echo "Error: Unable to fetch the latest version of @huggingface/tasks"
            exit 1
          fi

          # Download the package tarball from npm and calculate its checksum
          npm pack @huggingface/tasks@$LATEST_PUBLISHED_VERSION
          if [ ! -f "huggingface-tasks-$LATEST_PUBLISHED_VERSION.tgz" ]; then
            echo "Error: Failed to download @huggingface/tasks@$LATEST_PUBLISHED_VERSION"
            exit 1
          fi

          # Extract and remove dist and node_modules directories before checksum calculation
          tar -xf huggingface-tasks-$LATEST_PUBLISHED_VERSION.tgz -C /tmp
          rm -rf /tmp/package/dist /tmp/package/node_modules

          REMOTE_CHECKSUM=$(tar -xf huggingface-tasks-$LATEST_PUBLISHED_VERSION.tgz -C /tmp && tar -cf - /tmp/package | sha256sum | cut -d' ' -f1)
          echo "Remote package checksum: $REMOTE_CHECKSUM"

          if [ "$LOCAL_CHECKSUM" != "$REMOTE_CHECKSUM" ]; then
            echo "Checksum Verification Failed: The local @huggingface/tasks package differs from the remote version. Release halted. Local Checksum: $LOCAL_CHECKSUM, Remote Checksum: $REMOTE_CHECKSUM"
            exit 1
          fi
          echo "Checksum Verification Successful: The local and remote @huggingface/tasks packages are consistent. Proceeding with the @huggingface/widgets package release. Local Checksum: $LOCAL_CHECKSUM, Remote Checksum: $REMOTE_CHECKSUM."

      - run: pnpm publish --no-git-checks .
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: git push --follow-tags
      # hack - reuse actions/setup-node@v3 just to set a new registry
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://npm.pkg.github.com"
      - run: pnpm publish --no-git-checks .
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
